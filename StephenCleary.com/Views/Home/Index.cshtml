@using StephenCleary.Helpers;

@{
    ViewBag.Title = "Stephen Cleary \"dot com\"";
}

<div id="main" class="hidden">

<div data-role="page" id="index" data-title="@ViewBag.Title">
    <div data-role="header">
        <h1>@ViewBag.Title</h1>
    </div>
	<div data-role="content">
        <div>
            <div style="float:left;"><img src="Content/images/blank.gif" width="128" height="128" data-src="Content/images/avatar.128.jpg" /></div>
            <div style="float:right;"><img src="Content/images/blank.gif" width="128" height="128" data-src="Content/images/trythis.128.jpg" /></div>
            <div style="text-align:center;">
                <p>I am Stephen Cleary, a Christian, husband, father, and programmer living in Northern Michigan.</p>
                <p>This site is a collection of my projects and articles; I hope you find them useful!</p>
            </div>
        </div>
        <div style="clear:both;"></div>
        <div data-role="controlgroup">
		    <a href="http://nitoprograms.com/" data-role="button">Blog</a>
		    <a href="#libraries" data-role="button">Open-source libraries and projects</a>
            <a href="#publications" data-role="button">Publications</a>
            <a href="#accounts" data-role="button">Online accounts</a>
		    <a href="http://picasaweb.google.com/stephenandmandy" data-role="button">Family pictures</a>
            <a href="#" data-role="button" id="email">Email</a>
            <!-- TODO: Presentations -->
        </div>
	</div>
</div>

<div data-role="page" id="accounts" data-title="Online accounts">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>Online accounts</h2>
    </div>
	<div data-role="content">
        <div data-role="controlgroup">
            <a href="http://stackoverflow.com/users/263693/stephen-cleary" data-role="button">Stack Overflow</a>
            <a href="http://social.msdn.microsoft.com/Forums/en-US/user/threads?user=Stephen%20Cleary" data-role="button">MSDN Forums</a>
            <a href="http://www.codeplex.com/site/users/view/StephenCleary" data-role="button">CodePlex</a>
        </div>
	</div>
</div>

<div data-role="page" id="publications" data-title="Publications">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>Publications</h2>
    </div>
	<div data-role="content">
        <ul data-role="listview">
            <li data-role="list-divider">Trade journals</li>
	        <li><a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx">
                <h2>It's All About the SynchronizationContext</h2>
                <p class="notruncate">A thorough look at the @Html.CSharp("`SynchronizationContext`") type, starting with some history and concluding with how it is used by various components (including components in development such as the @Html.CSharp("async") / @Html.CSharp("await") compiler support).</p>
                <p class="ui-li-aside">MSDN Magazine, February 2011</p>
	        </a></li>
	        <li><a href="http://www.boost.org/doc/libs/1_43_0/libs/type_traits/doc/html/boost_typetraits/background.html">
                <h2>C++ Type Traits</h2>
                <p class="notruncate">A brief description of the Boost.TypeTraits library, which uses advanced templates to determine (and manipulate) type properties at compile-time. This was the first article on template metaprogramming; the Type Traits library provided the groundwork for more advanced template metaprogramming. I co-authored this article with John Maddock.</p>
                <p class="ui-li-aside">Dr. Dobb's Journal, October 2000</p>
            </a></li>
            <li data-role="list-divider">Online</li>
	        <li><a href="http://nitoprograms.blogspot.com/2012/02/async-and-await.html">
                <h2>Async and Await</h2>
                <p class="notruncate">An introduction to @Html.CSharp("async") and @Html.CSharp("await").</p>
                <p class="ui-li-aside">Blog</p>
            </a></li>
	        <li><a href="http://nitoprograms.blogspot.com/2009/04/tcpip-net-sockets-faq.html">
                <h2>TCP/IP .NET Sockets FAQ</h2>
                <p class="notruncate">How to use TCP/IP sockets from .NET (correctly). I've gotten a lot of thankful responses on the <i>Message framing</i> and <i>Detection of half-open connections</i> sections in particular.</p>
                <p class="ui-li-aside">Blog</p>
            </a></li>
	        <li><a href="http://nitoprograms.blogspot.com/2009/08/how-to-implement-idisposable-and.html">
                <h2>Implementing IDisposable and Finalizers</h2>
                <p class="notruncate">Three simple rules for @Html.CSharp("`IDisposable`") and finalizers. These rules are derived from my background in reliable programming, and are far simpler than the "dispose pattern" officially recommended by Microsoft.</p>
                <p class="ui-li-aside">Blog</p>
            </a></li>
	        <li><a href="http://www.codeproject.com/Articles/29534/IDisposable-What-Your-Mother-Never-Told-You-About">
                <h2>IDisposable: What Your Mother Never Told You about Resource Deallocation</h2>
                <p class="notruncate">An early article discussing some of the problems around nondeterministic resource deallocation and @Html.CSharp("`IDisposable`"). I was still quite new to .NET at the time.</p>
                <p class="ui-li-aside">Code Project</p>
            </a></li>
        </ul>
	</div>
</div>

<div data-role="page" id="libraries" data-title="Libraries">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>Open-source libraries and projects</h2>
    </div>
	<div data-role="content">
        <ul data-role="listview">
	        <li><a href="#libraries_ConnectedProperties">
                <h2>Connected Properties</h2>
                <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=connectedproperties&DownloadId=483866" />
                <p>Dynamically add properties to (almost) any object instance.</p>
	        </a></li>
	        <li><a href="#libraries_AsyncEx">
                <h2>AsyncEx</h2>
                <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=nitoasyncex&DownloadId=483868" />
                <p>Helper types for developing with @Html.CSharp("async") and @Html.CSharp("await").</p>
            </a></li>
	        <li><a href="#libraries_Comparers">
                <h2>Comparers</h2>
                <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=comparers&DownloadId=404414" />
                <p>The last comparison library you'll ever need!</p>
            </a></li>
	        <li><a href="#libraries_ArraySegments">
                <h2>ArraySegments</h2>
                <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=arraysegments&DownloadId=483861" />
                <p>A library for slicing and dicing arrays (without copying).</p>
            </a></li>
        </ul>
	</div>
</div>

<div data-role="page" id="libraries_ArraySegments" data-title="ArraySegments">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>ArraySegments</h2>
    </div>
	<div data-role="content">
        <div>
            <p>The ArraySegments library allows you to easily slice and dice @Html.CSharp("`ArraySegment`<`T`>") instances.</p>
@Html.CSharp(@"
// Use the ArraySegments library.
using ArraySegments;

class `Test`
{
  public static void Playground()
  {
    byte[] myData = ...;
    `ArraySegment`<byte> data = myData.AsArraySegment();

    // Take, Skip, TakeLast, SkipLast, and Slice are all available.
    `ArraySegment`<byte> header = data.Take(1024); // Look ma, no copying!

    // BinaryReader/BinaryWriter/MemoryStreams also provided for convenience.
    using (var binaryReader = header.CreateBinaryReader())
    {
      int littleEndianInt32 = binaryReader.ReadInt32();
      ...;
    }
  }
}")
        </div>
        <div style="text-align:center">
            <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=arraysegments&DownloadId=483861" />
        </div>
        <div data-role="controlgroup">
            <a href="http://arraysegments.codeplex.com/" data-role="button">Project page (CodePlex)</a>
            <a href="https://nuget.org/packages/Nito.ArraySegments" data-role="button">NuGet package</a>
            <a href="http://arraysegments.codeplex.com/documentation" data-role="button">Documentation (CodePlex)</a>
            <a href="http://arraysegments.codeplex.com/discussions" data-role="button">Forum (CodePlex)</a>
            <a href="http://arraysegments.codeplex.com/workitem/list/basic" data-role="button">Issue tracker (CodePlex)</a>
            <a href="http://arraysegments.codeplex.com/SourceControl/BrowseLatest" data-role="button">Browse source code (CodePlex)</a>
        </div>
	</div>
</div>

<div data-role="page" id="libraries_Comparers" data-title="Comparers">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>Comparers</h2>
    </div>
    <div>
        <p>The Comparers library provides a semi-fluent API for defining how objects can be compared. This makes even the most complex comparisons relatively easy.</p>
@Html.CSharp(@"
// Use the Comparers library.
using Comparers;

class `Person`
{
  public string FirstName { get; }
  public string LastName { get; }
}

class `Test`
{
  public static void SortByLastNameThenFirstName(`List`<`Person`> list)
  {
    `IComparer`<`Person`> nameComparer = `Compare`<`Person`>.OrderBy(p => p.LastName).ThenBy(p => p.FirstName);
    list.Sort(nameComparer);
  }
}")
        <p>The Comparers library also provides assistance for defining the default comparison for a type:</p>
@Html.CSharp(@"
// Use the Comparers library.
using Comparers;

class `Person` : `ComparableBase`<`Person`>
{
  public string FirstName { get; }
  public string LastName { get; }

  static Person()
  {
    // ComparableBase uses DefaultComparer to correctly implement:
    //   IComparable<Person>, IEquatable<Person>, IComparable, Object.Equals, Object.GetHashCode.
    DefaultComparer = `Compare`<`Person`>.OrderBy(p => p.LastName).ThenBy(p => p.FirstName);
  }
}")
    </div>
	<div data-role="content">
        <div style="text-align:center">
            <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=comparers&DownloadId=404414" />
        </div>
        <div data-role="controlgroup">
            <a href="http://comparers.codeplex.com/" data-role="button">Project page (CodePlex)</a>
            <a href="http://nuget.org/packages/Comparers" data-role="button">NuGet package</a>
            <a href="http://comparers.codeplex.com/documentation" data-role="button">Documentation (CodePlex)</a>
            <a href="http://comparers.codeplex.com/discussions" data-role="button">Forum (CodePlex)</a>
            <a href="http://comparers.codeplex.com/workitem/list/basic" data-role="button">Issue tracker (CodePlex)</a>
            <a href="http://comparers.codeplex.com/SourceControl/BrowseLatest" data-role="button">Browse source code (CodePlex)</a>
        </div>
	</div>
</div>

<div data-role="page" id="libraries_ConnectedProperties" data-title="Connected Properties">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>Connected Properties</h2>
    </div>
	<div data-role="content">
        <div>
            <p>Connected Properties allow you to dynamically attach properties to any reference type that uses reference equality.</p>
            <p>The connected properties have lifetimes exactly like regular properties (even if they reference their carrier object). A connected property is a true <a href="http://en.wikipedia.org/wiki/Ephemeron">ephemeron</a>.</p>
@Html.CSharp(@"
// Use the Connected Properties library.
using Nito.ConnectedProperties;
using Nito.ConnectedProperties.Named;

class `Program`
{
  // Display the Name of any object passed into this method.
  public static void DisplayName(object obj)
  {
    // Look up a connected property called ""Name"".
    `!var nameProperty = obj.GetConnectedProperty(""Name"");`!
    `Console`.WriteLine(""Name: "" + `!nameProperty.Get()`!);
  }

  static void Main()
  {
    // Create an object to name.
    var obj = new object();

    // I dub this object ""Bob"".
    `!var nameProperty = obj.GetConnectedProperty(""Name"");`!
    `!nameProperty.Set(""Bob"");`!

    // Pass the object to the DisplayName method, which is able to retrieve the connected property.
    DisplayName(obj);
  }
}")
            <p>Note: You should not develop a design using Connected Properties. The Connected Properties library should only be used to work around limitations in third-party code.</p>
        </div>
        <div style="text-align:center">
            <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=connectedproperties&DownloadId=483866" />
        </div>
        <div data-role="controlgroup">
            <a href="http://connectedproperties.codeplex.com/" data-role="button">Project page (CodePlex)</a>
            <a href="http://nuget.org/packages/ConnectedProperties" data-role="button">NuGet package</a>
            <a href="http://connectedproperties.codeplex.com/documentation" data-role="button">Documentation (CodePlex)</a>
            <a href="http://connectedproperties.codeplex.com/discussions" data-role="button">Forum (CodePlex)</a>
            <a href="http://connectedproperties.codeplex.com/workitem/list/basic" data-role="button">Issue tracker (CodePlex)</a>
            <a href="http://connectedproperties.codeplex.com/SourceControl/BrowseLatest" data-role="button">Browse source code (CodePlex)</a>
        </div>
	</div>
</div>

<div data-role="page" id="libraries_AsyncEx" data-title="AsyncEx">
    <div data-role="header">
		<a href="#index" data-role="button" data-icon="home" data-iconpos="notext">Home</a>
        <h2>AsyncEx</h2>
    </div>
	<div data-role="content">
        <div>
            <p>This is a "fill in the gaps" sort of library for working with @Html.CSharp("async") and @Html.CSharp("await"). This library contains a large number of small utility classes.</p>
            <p>One type is @Html.CSharp("`AsyncLazy`<`T`>"), which provides asynchronous lazy initialization. It executes the asynchronous initialization when it is awaited, and ensures that the initialization is only performed once.</p>
@Html.CSharp(@"
// Use the AsyncEx library.
using Nito.AsyncEx;

class `Test`
{
  private static readonly `AsyncLazy`<`MyResource`> resource =
      new `AsyncLazy`(async () =>
      {
        var ret = new `MyResource`();
        await ret.InitializeAsync();
        return ret;
      });

  public static async `Task` MethodWhichUsesResourceAsync()
  {
    `MyResource` myResource = await resource;
    ...;
  }
}")
            <p>Another useful type is @Html.CSharp("`AsyncLock`"), an asynchronous lock. Asynchronous methods may use the lock for synchronization without blocking (that is, the <i>method</i> is blocked, but the <i>thread</i> is not):</p>
@Html.CSharp(@"
// Use the AsyncEx library.
using Nito.AsyncEx;

class `Test`
{
  private readonly `AsyncLock` sync = new `AsyncLock`();

  public async `Task` AccessSharedStateAsync()
  {
    using (await sync.LockAsync())
    {
      ...;
    }
  }
}")
        </div>

        <div style="text-align:center">
            <img src="Content/images/blank.gif" width="128" height="128" data-src="http://download-codeplex.sec.s-msft.com/Download?ProjectName=nitoasyncex&DownloadId=483868" />
        </div>
        <div data-role="controlgroup">
            <a href="http://nitoasyncex.codeplex.com/" data-role="button">Project page (CodePlex)</a>
            <a href="http://nuget.org/packages/Nito.AsyncEx" data-role="button">NuGet package</a>
            <a href="http://nitoasyncex.codeplex.com/documentation" data-role="button">Documentation (CodePlex)</a>
            <a href="http://nitoasyncex.codeplex.com/discussions" data-role="button">Forum (CodePlex)</a>
            <a href="http://nitoasyncex.codeplex.com/workitem/list/basic" data-role="button">Issue tracker (CodePlex)</a>
            <a href="http://nitoasyncex.codeplex.com/SourceControl/BrowseLatest" data-role="button">Browse source code (CodePlex)</a>
        </div>
	</div>
</div>

</div>

@section scripts {

<script type="text/javascript">
$(document).bind("mobileinit", function () {
    $.mobile.defaultPageTransition = 'none';

    $('img').each(function () {
        $(this).attr('src', $(this).attr('data-src'));
    });
    
    var x = 'an';
    var y = 'steph';
    $('#email').attr({ href: 'mailto:' + y + 'en' + x + 'dm' + x + 'dy@@' + 'gma' + 'il.' + 'com' });

    $('#main').removeClass('hidden');
});
</script>

}